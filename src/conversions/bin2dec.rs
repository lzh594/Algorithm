use num_traits::CheckedAdd;

/// 二进制转十进制
///
/// # Arguments
///
/// * `bin`: 二进制字符串
///
/// returns: Option<u128> 十进制/None
///
/// # Examples
///
/// ```
/// use algorithm::conversions::bin2dec;
/// assert_eq!(bin2dec("1111111111"), Some(1023));
/// ```
pub fn bin2dec(bin: &str) -> Option<u128> {
    if bin.len() > 128 {
        return None;
    }
    let mut dec = 0;
    let mut idx = 1;
    for bit in bin.chars().rev() {
        match bit {
            '1' => {
                if let Some(sum) = dec.checked_add(&idx) {
                    dec = sum;
                }
            }
            '0' => {}
            _ => return None
        }
        idx <<= 1;
    }
    Some(dec)
}

#[cfg(test)]
mod tests_bin2dec {
    use super::*;

    #[test]
    fn test_normal() {
        assert_eq!(bin2dec("0000000110"), Some(6));
        assert_eq!(bin2dec("1000011110"), Some(542));
        assert_eq!(bin2dec("1111111111"), Some(1023));
    }

    #[test]
    fn test_big() {
        assert_eq!(
            bin2dec("111111111111111111111111"),
            Some(16_777_215)
        );
        // 32 bits
        assert_eq!(
            bin2dec("11111111111111111111111111111111"),
            Some(4_294_967_295)
        );
        // 64 bits
        assert_eq!(
            bin2dec("1111111111111111111111111111111111111111111111111111111111111111"),
            Some(18_446_744_073_709_551_615u128)
        );
    }

    #[test]
    fn test_very_big() {
        // 96 bits
        assert_eq!(
            bin2dec(
                "1111111111111111111111111111111111111111111111111111111111111111\
                11111111111111111111111111111111"
            ),
            Some(79_228_162_514_264_337_593_543_950_335u128)
        );

        // 128 bits
        assert_eq!(
            bin2dec(
                "1111111111111111111111111111111111111111111111111111111111111111\
                1111111111111111111111111111111111111111111111111111111111111111"
            ),
            Some(340_282_366_920_938_463_463_374_607_431_768_211_455u128)
        );
    }

    #[test]
    fn test_overflow() {
        // 129 bits, should overflow
        assert!(bin2dec(
            "1111111111111111111111111111111111111111111111111111111111111111\
                11111111111111111111111111111111111111111111111111111111111111111"
        ).is_none());
        // obviously none
        assert!(bin2dec(
            "1111111111111111111111111111111111111111111111111111111111111111\
                1111111111111111111111111111111111111111111111111111111111111\
                1111111111111111111111111111111111111111111111111111111111111\
                1111111111111111111111111111111111111111111111111111111111111\
                1111111111111111111111111111111111111111111111111111111111111\
                1111111111111111111111111111111111111111111111111111111111111\
                1111111111111111111111111111111111111111111111111111111111111"
        ).is_none());
    }
}